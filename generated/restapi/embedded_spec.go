// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

// SwaggerJSON embedded version of the swagger document used at generation time
var SwaggerJSON json.RawMessage

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "TACO, the Stanford Digital Repository (SDR) Management Layer interface",
    "title": "taco",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "0.0.1"
  },
  "host": "sdr.dlss.stanford.edu",
  "basePath": "/v1",
  "paths": {
    "/file": {
      "post": {
        "description": "Deposits a new File (binary) into SDR. Will return the SDR identifier for the File resource (aka the metadata object generated and persisted for File management).",
        "produces": [
          "application/json"
        ],
        "summary": "Deposit a new File (binary) into SDR.",
        "operationId": "depositNewFile",
        "parameters": [
          {
            "description": "File / Binary.",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/File"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/resource": {
      "post": {
        "description": "Deposits a new resource (Collection, Digital Repository Object, Fileset, or subclass of those) into SDR. Will return the SDR identifier for the resource.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Deposit a new resource into SDR.",
        "operationId": "depositNewResource",
        "parameters": [
          {
            "description": "JSON-LD Representation of the resource metadata going into SDR. Needs to fit the SDR 3.0 MAP requirements.",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Resource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "example": "oo000oo0001"
                }
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/resource/{ID}": {
      "get": {
        "description": "Retrieves the metadata (as JSON-LD and SDR MAP) for an existing, deposited resource (Collection, Digital Repository Object, Fileset, File metadata object [not binary] or subclass of those) in SDR. The resource is identified by the DRUID or SDR identifier assigned.",
        "produces": [
          "application/json"
        ],
        "summary": "Retrieve the metadata for a deposited / existing resource within SDR.",
        "operationId": "retrieveResource",
        "parameters": [
          {
            "type": "string",
            "description": "SDR Identifier for the Resource.",
            "name": "ID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Resource"
            }
          },
          "404": {
            "description": "Resource not found"
          }
        }
      },
      "patch": {
        "description": "Updates an existing, deposited resource (Collection, Digital Repository Object, Fileset, File metadata object [not binary] or subclass of those) into SDR. Only include the required fields then the fields you wish to have changed. Will return the SDR identifier for the updated resource.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Update an existing / deposited resource in SDR.",
        "operationId": "updateResource",
        "parameters": [
          {
            "type": "string",
            "description": "SDR Identifier for the Resource.",
            "name": "ID",
            "in": "path",
            "required": true
          },
          {
            "description": "JSON-LD Representation of the resource metadata you want to change for that specified resouce (identified via its identifier or DRUID). Needs to fit the SDR 3.0 MAP requirements.",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Resource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Resource not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      }
    }
  },
  "definitions": {
    "File": {
      "type": "object",
      "required": [
        "UUID",
        "filename"
      ],
      "properties": {
        "UUID": {
          "type": "string",
          "example": "a03eea52-77a0-4e55-9026-b022d61c89fc"
        },
        "filename": {
          "type": "string",
          "example": "mybook.pdf"
        }
      },
      "example": {
        "UUID": "a03eea52-77a0-4e55-9026-b022d61c89fc",
        "filename": "mybook.pdf"
      }
    },
    "Resource": {
      "type": "object",
      "required": [
        "sourceId",
        "title"
      ],
      "properties": {
        "id": {
          "type": "string",
          "example": "oo000oo0001"
        },
        "sourceId": {
          "type": "string",
          "example": "bib12345678"
        },
        "title": {
          "type": "string",
          "example": "My work"
        }
      },
      "example": {
        "id": "oo000oo0001",
        "sourceId": "bib12345678",
        "title": "My work"
      }
    }
  }
}`))
}
