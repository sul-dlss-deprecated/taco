// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// DepositFileHandlerFunc turns a function with the right signature into a deposit file handler
type DepositFileHandlerFunc func(DepositFileParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DepositFileHandlerFunc) Handle(params DepositFileParams) middleware.Responder {
	return fn(params)
}

// DepositFileHandler interface for that can handle valid deposit file params
type DepositFileHandler interface {
	Handle(DepositFileParams) middleware.Responder
}

// NewDepositFile creates a new http.Handler for the deposit file operation
func NewDepositFile(ctx *middleware.Context, handler DepositFileHandler) *DepositFile {
	return &DepositFile{Context: ctx, Handler: handler}
}

/*DepositFile swagger:route POST /file depositFile

Deposit New File (binary).

Deposits a new File (binary) into SDR. Will return the SDR identifier for the File resource (aka the metadata object generated and persisted for management of the provided binary).

*/
type DepositFile struct {
	Context *middleware.Context
	Handler DepositFileHandler
}

func (o *DepositFile) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDepositFileParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
