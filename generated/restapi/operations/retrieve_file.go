// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
	"github.com/sul-dlss-labs/taco/authorization"
)

// RetrieveFileHandlerFunc turns a function with the right signature into a retrieve file handler
type RetrieveFileHandlerFunc func(RetrieveFileParams, *authorization.Agent) middleware.Responder

// Handle executing the request and returning a response
func (fn RetrieveFileHandlerFunc) Handle(params RetrieveFileParams, principal *authorization.Agent) middleware.Responder {
	return fn(params, principal)
}

// RetrieveFileHandler interface for that can handle valid retrieve file params
type RetrieveFileHandler interface {
	Handle(RetrieveFileParams, *authorization.Agent) middleware.Responder
}

// NewRetrieveFile creates a new http.Handler for the retrieve file operation
func NewRetrieveFile(ctx *middleware.Context, handler RetrieveFileHandler) *RetrieveFile {
	return &RetrieveFile{Context: ctx, Handler: handler}
}

/*RetrieveFile swagger:route GET /file/{ID} retrieveFile

Retrieve TACO managed binary.

Retrieves the binary associated with the TACO identifier.

*/
type RetrieveFile struct {
	Context *middleware.Context
	Handler RetrieveFileHandler
}

func (o *RetrieveFile) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewRetrieveFileParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *authorization.Agent
	if uprinc != nil {
		principal = uprinc.(*authorization.Agent) // this is really a authorization.Agent, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
