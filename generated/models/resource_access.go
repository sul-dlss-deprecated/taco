// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ResourceAccess Access Metadata for the Resource.
// swagger:model resourceAccess
type ResourceAccess struct {

	// Access level for the resource.
	// Required: true
	Access *string `json:"access"`

	// Download level for the resource metadata.
	// Required: true
	Download *string `json:"download"`
}

// Validate validates this resource access
func (m *ResourceAccess) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccess(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDownload(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var resourceAccessTypeAccessPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["world","stanford","location-based","citation-only","dark"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		resourceAccessTypeAccessPropEnum = append(resourceAccessTypeAccessPropEnum, v)
	}
}

const (
	// ResourceAccessAccessWorld captures enum value "world"
	ResourceAccessAccessWorld string = "world"
	// ResourceAccessAccessStanford captures enum value "stanford"
	ResourceAccessAccessStanford string = "stanford"
	// ResourceAccessAccessLocationBased captures enum value "location-based"
	ResourceAccessAccessLocationBased string = "location-based"
	// ResourceAccessAccessCitationOnly captures enum value "citation-only"
	ResourceAccessAccessCitationOnly string = "citation-only"
	// ResourceAccessAccessDark captures enum value "dark"
	ResourceAccessAccessDark string = "dark"
)

// prop value enum
func (m *ResourceAccess) validateAccessEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, resourceAccessTypeAccessPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ResourceAccess) validateAccess(formats strfmt.Registry) error {

	if err := validate.Required("access", "body", m.Access); err != nil {
		return err
	}

	// value enum
	if err := m.validateAccessEnum("access", "body", *m.Access); err != nil {
		return err
	}

	return nil
}

var resourceAccessTypeDownloadPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["world","stanford","location-based","citation-only","dark"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		resourceAccessTypeDownloadPropEnum = append(resourceAccessTypeDownloadPropEnum, v)
	}
}

const (
	// ResourceAccessDownloadWorld captures enum value "world"
	ResourceAccessDownloadWorld string = "world"
	// ResourceAccessDownloadStanford captures enum value "stanford"
	ResourceAccessDownloadStanford string = "stanford"
	// ResourceAccessDownloadLocationBased captures enum value "location-based"
	ResourceAccessDownloadLocationBased string = "location-based"
	// ResourceAccessDownloadCitationOnly captures enum value "citation-only"
	ResourceAccessDownloadCitationOnly string = "citation-only"
	// ResourceAccessDownloadDark captures enum value "dark"
	ResourceAccessDownloadDark string = "dark"
)

// prop value enum
func (m *ResourceAccess) validateDownloadEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, resourceAccessTypeDownloadPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ResourceAccess) validateDownload(formats strfmt.Registry) error {

	if err := validate.Required("download", "body", m.Download); err != nil {
		return err
	}

	// value enum
	if err := m.validateDownloadEnum("download", "body", *m.Download); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ResourceAccess) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResourceAccess) UnmarshalBinary(b []byte) error {
	var res ResourceAccess
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
