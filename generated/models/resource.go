// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Resource resource
// swagger:model Resource
type Resource struct {

	// URI for the JSON-LD context definitions
	// Required: true
	AtContext *strfmt.URI `json:"@context"`

	// URI for the resource type
	// Required: true
	AtType *strfmt.URI `json:"@type"`

	// What groups should be able to access (view) the resource in Access environments
	// Required: true
	Access *string `json:"access"`

	// The parent resource(s) of this resource.
	ContainedBy []strfmt.URI `json:"contained-by"`

	// The child resource(s) of this resource.
	Contains []strfmt.URI `json:"contains"`

	// The TACO identifier for the resource. Usually DRUID-derived.
	ID string `json:"id,omitempty"`

	// The label or processing title for the resource.
	// Required: true
	Label *string `json:"label"`

	// Should the resource be released to Preservation environments
	// Required: true
	Preserve *bool `json:"preserve"`

	// Should the resource's metadata be released to Access environments
	// Required: true
	Publish *bool `json:"publish"`

	// The source identifier (bib id, archival id) for the resource that was digitized or derived from to create the TACO resource.
	SourceID string `json:"sourceId,omitempty"`
}

// Validate validates this resource
func (m *Resource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAtContext(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateAtType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateAccess(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateContainedBy(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateContains(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLabel(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePreserve(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePublish(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Resource) validateAtContext(formats strfmt.Registry) error {

	if err := validate.Required("@context", "body", m.AtContext); err != nil {
		return err
	}

	if err := validate.FormatOf("@context", "body", "uri", m.AtContext.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Resource) validateAtType(formats strfmt.Registry) error {

	if err := validate.Required("@type", "body", m.AtType); err != nil {
		return err
	}

	if err := validate.FormatOf("@type", "body", "uri", m.AtType.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Resource) validateAccess(formats strfmt.Registry) error {

	if err := validate.Required("access", "body", m.Access); err != nil {
		return err
	}

	return nil
}

func (m *Resource) validateContainedBy(formats strfmt.Registry) error {

	if swag.IsZero(m.ContainedBy) { // not required
		return nil
	}

	return nil
}

func (m *Resource) validateContains(formats strfmt.Registry) error {

	if swag.IsZero(m.Contains) { // not required
		return nil
	}

	return nil
}

func (m *Resource) validateLabel(formats strfmt.Registry) error {

	if err := validate.Required("label", "body", m.Label); err != nil {
		return err
	}

	return nil
}

func (m *Resource) validatePreserve(formats strfmt.Registry) error {

	if err := validate.Required("preserve", "body", m.Preserve); err != nil {
		return err
	}

	return nil
}

func (m *Resource) validatePublish(formats strfmt.Registry) error {

	if err := validate.Required("publish", "body", m.Publish); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Resource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Resource) UnmarshalBinary(b []byte) error {
	var res Resource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
