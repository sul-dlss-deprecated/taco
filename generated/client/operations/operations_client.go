// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteResource deletes a t a c o resource

Deletes a TACO resource (Collection, Digital Repository Object, File resource (metadata) and File binary, or subclass of those).
*/
func (a *Client) DeleteResource(params *DeleteResourceParams) (*DeleteResourceNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteResource",
		Method:             "DELETE",
		PathPattern:        "/resource/{ID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteResourceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteResourceNoContent), nil

}

/*
DepositFile deposits new file binary

Deposits a new File (binary) into SDR. Will return the SDR identifier for the File resource (aka the metadata object generated and persisted for management of the provided binary).
*/
func (a *Client) DepositFile(params *DepositFileParams, authInfo runtime.ClientAuthInfoWriter) (*DepositFileCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDepositFileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "depositFile",
		Method:             "POST",
		PathPattern:        "/file",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DepositFileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DepositFileCreated), nil

}

/*
DepositResource deposits new t a c o resource

Deposits a new resource (Collection, Digital Repository Object, File [metadata only] or subclass of those) into SDR. Will return the SDR identifier for the resource.
*/
func (a *Client) DepositResource(params *DepositResourceParams, authInfo runtime.ClientAuthInfoWriter) (*DepositResourceCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDepositResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "depositResource",
		Method:             "POST",
		PathPattern:        "/resource",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/json+ld"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DepositResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DepositResourceCreated), nil

}

/*
GetProcessStatus resources processing status

Get the processing status and history for a resource.
*/
func (a *Client) GetProcessStatus(params *GetProcessStatusParams, authInfo runtime.ClientAuthInfoWriter) (*GetProcessStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProcessStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProcessStatus",
		Method:             "GET",
		PathPattern:        "/status/{ID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetProcessStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetProcessStatusOK), nil

}

/*
HealthCheck healths check

The healthcheck endpoint provides information about the health of the service.
*/
func (a *Client) HealthCheck(params *HealthCheckParams) (*HealthCheckOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHealthCheckParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "healthCheck",
		Method:             "GET",
		PathPattern:        "/healthcheck",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HealthCheckReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*HealthCheckOK), nil

}

/*
RetrieveResource retrieves t a c o resource metadata

Retrieves the metadata (as JSON-LD following our SDR3 MAP v.1) for an existing TACO resource (Collection, Digital Repository Object, File metadata object [not binary] or subclass of those). The resource is identified by the TACO identifier.
*/
func (a *Client) RetrieveResource(params *RetrieveResourceParams, authInfo runtime.ClientAuthInfoWriter) (*RetrieveResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRetrieveResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "retrieveResource",
		Method:             "GET",
		PathPattern:        "/resource/{ID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RetrieveResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RetrieveResourceOK), nil

}

/*
UpdateResource updates t a c o resource

Updates the metadata for an existing TACO resource (Collection, Digital Repository Object, File metadata object [not binary] or subclass of those). Only include the required fields and the fields you wish to have changed. Will return the TACO resource identifier.
*/
func (a *Client) UpdateResource(params *UpdateResourceParams) (*UpdateResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateResource",
		Method:             "PATCH",
		PathPattern:        "/resource/{ID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/json+ld"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateResourceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateResourceOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
