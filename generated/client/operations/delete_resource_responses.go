// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// DeleteResourceReader is a Reader for the DeleteResource structure.
type DeleteResourceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteResourceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 204:
		result := NewDeleteResourceNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewDeleteResourceUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewDeleteResourceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewDeleteResourceInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDeleteResourceNoContent creates a DeleteResourceNoContent with default headers values
func NewDeleteResourceNoContent() *DeleteResourceNoContent {
	return &DeleteResourceNoContent{}
}

/*DeleteResourceNoContent handles this case with default header values.

TACO resource metadata delete.
*/
type DeleteResourceNoContent struct {
}

func (o *DeleteResourceNoContent) Error() string {
	return fmt.Sprintf("[DELETE /resource/{ID}][%d] deleteResourceNoContent ", 204)
}

func (o *DeleteResourceNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteResourceUnauthorized creates a DeleteResourceUnauthorized with default headers values
func NewDeleteResourceUnauthorized() *DeleteResourceUnauthorized {
	return &DeleteResourceUnauthorized{}
}

/*DeleteResourceUnauthorized handles this case with default header values.

You are not authorized to delete a resource in TACO.
*/
type DeleteResourceUnauthorized struct {
}

func (o *DeleteResourceUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /resource/{ID}][%d] deleteResourceUnauthorized ", 401)
}

func (o *DeleteResourceUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteResourceNotFound creates a DeleteResourceNotFound with default headers values
func NewDeleteResourceNotFound() *DeleteResourceNotFound {
	return &DeleteResourceNotFound{}
}

/*DeleteResourceNotFound handles this case with default header values.

Invalid ID supplied
*/
type DeleteResourceNotFound struct {
}

func (o *DeleteResourceNotFound) Error() string {
	return fmt.Sprintf("[DELETE /resource/{ID}][%d] deleteResourceNotFound ", 404)
}

func (o *DeleteResourceNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteResourceInternalServerError creates a DeleteResourceInternalServerError with default headers values
func NewDeleteResourceInternalServerError() *DeleteResourceInternalServerError {
	return &DeleteResourceInternalServerError{}
}

/*DeleteResourceInternalServerError handles this case with default header values.

This resource could not be deleted at this time by TACO.
*/
type DeleteResourceInternalServerError struct {
}

func (o *DeleteResourceInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /resource/{ID}][%d] deleteResourceInternalServerError ", 500)
}

func (o *DeleteResourceInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
