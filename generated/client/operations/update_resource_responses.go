// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/sul-dlss-labs/taco/generated/models"
)

// UpdateResourceReader is a Reader for the UpdateResource structure.
type UpdateResourceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateResourceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewUpdateResourceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewUpdateResourceBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewUpdateResourceUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 415:
		result := NewUpdateResourceUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 422:
		result := NewUpdateResourceUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewUpdateResourceInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateResourceOK creates a UpdateResourceOK with default headers values
func NewUpdateResourceOK() *UpdateResourceOK {
	return &UpdateResourceOK{}
}

/*UpdateResourceOK handles this case with default header values.

TACO resource metadata updated & processing started.
*/
type UpdateResourceOK struct {
	Payload models.ResourceResponse
}

func (o *UpdateResourceOK) Error() string {
	return fmt.Sprintf("[PATCH /resource/{ID}][%d] updateResourceOK  %+v", 200, o.Payload)
}

func (o *UpdateResourceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateResourceBadRequest creates a UpdateResourceBadRequest with default headers values
func NewUpdateResourceBadRequest() *UpdateResourceBadRequest {
	return &UpdateResourceBadRequest{}
}

/*UpdateResourceBadRequest handles this case with default header values.

Invalid ID supplied
*/
type UpdateResourceBadRequest struct {
}

func (o *UpdateResourceBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /resource/{ID}][%d] updateResourceBadRequest ", 400)
}

func (o *UpdateResourceBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateResourceUnauthorized creates a UpdateResourceUnauthorized with default headers values
func NewUpdateResourceUnauthorized() *UpdateResourceUnauthorized {
	return &UpdateResourceUnauthorized{}
}

/*UpdateResourceUnauthorized handles this case with default header values.

You are not authorized to update a resource in TACO.
*/
type UpdateResourceUnauthorized struct {
}

func (o *UpdateResourceUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /resource/{ID}][%d] updateResourceUnauthorized ", 401)
}

func (o *UpdateResourceUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateResourceUnsupportedMediaType creates a UpdateResourceUnsupportedMediaType with default headers values
func NewUpdateResourceUnsupportedMediaType() *UpdateResourceUnsupportedMediaType {
	return &UpdateResourceUnsupportedMediaType{}
}

/*UpdateResourceUnsupportedMediaType handles this case with default header values.

Unsupported resource type provided. TACO resources should be handed over as JSON or JSON-LD.
*/
type UpdateResourceUnsupportedMediaType struct {
}

func (o *UpdateResourceUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PATCH /resource/{ID}][%d] updateResourceUnsupportedMediaType ", 415)
}

func (o *UpdateResourceUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateResourceUnprocessableEntity creates a UpdateResourceUnprocessableEntity with default headers values
func NewUpdateResourceUnprocessableEntity() *UpdateResourceUnprocessableEntity {
	return &UpdateResourceUnprocessableEntity{}
}

/*UpdateResourceUnprocessableEntity handles this case with default header values.

The resource JSON provided had an unspecified or unsupported field, or is otherwise unprocessable by TACO.
*/
type UpdateResourceUnprocessableEntity struct {
	Payload *models.ErrorResponse
}

func (o *UpdateResourceUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PATCH /resource/{ID}][%d] updateResourceUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *UpdateResourceUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateResourceInternalServerError creates a UpdateResourceInternalServerError with default headers values
func NewUpdateResourceInternalServerError() *UpdateResourceInternalServerError {
	return &UpdateResourceInternalServerError{}
}

/*UpdateResourceInternalServerError handles this case with default header values.

This resource could be updated at this time by TACO.
*/
type UpdateResourceInternalServerError struct {
}

func (o *UpdateResourceInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /resource/{ID}][%d] updateResourceInternalServerError ", 500)
}

func (o *UpdateResourceInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
