// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/sul-dlss-labs/taco/generated/models"
)

// HealthCheckReader is a Reader for the HealthCheck structure.
type HealthCheckReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *HealthCheckReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewHealthCheckOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 503:
		result := NewHealthCheckServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewHealthCheckOK creates a HealthCheckOK with default headers values
func NewHealthCheckOK() *HealthCheckOK {
	return &HealthCheckOK{}
}

/*HealthCheckOK handles this case with default header values.

The service is functioning nominally
*/
type HealthCheckOK struct {
	Payload *models.HealthCheckResponse
}

func (o *HealthCheckOK) Error() string {
	return fmt.Sprintf("[GET /healthcheck][%d] healthCheckOK  %+v", 200, o.Payload)
}

func (o *HealthCheckOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HealthCheckResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewHealthCheckServiceUnavailable creates a HealthCheckServiceUnavailable with default headers values
func NewHealthCheckServiceUnavailable() *HealthCheckServiceUnavailable {
	return &HealthCheckServiceUnavailable{}
}

/*HealthCheckServiceUnavailable handles this case with default header values.

The service is not working correctly
*/
type HealthCheckServiceUnavailable struct {
	Payload *models.HealthCheckResponse
}

func (o *HealthCheckServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /healthcheck][%d] healthCheckServiceUnavailable  %+v", 503, o.Payload)
}

func (o *HealthCheckServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HealthCheckResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
