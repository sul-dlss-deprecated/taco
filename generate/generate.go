package main

import (
	"encoding/json"
	"io/ioutil"
	"log"
	"os"
	"path"
	"strings"

	"github.com/sul-dlss-labs/taco/datautils"
)

// Reads all .txt files in the current folder
// and encodes them as strings literals in textfiles.go
func main() {
	generateMaps()
	generateDefaults()
}

// generateDefaults copies the defaults out of maps/DepositFile.json and encodes
// Them into a go file
func generateDefaults() {
	f, _ := ioutil.ReadFile("maps/DepositFile.json")
	var schema datautils.JSONObject
	json.Unmarshal(f, &schema)
	defaults := findDefaults(&schema)
	byt, err := json.Marshal(defaults)
	if err != nil {
		panic(err)
	}

	out, _ := os.Create("handlers/file_template.go")
	out.Write([]byte("// Code generated by generate/generate.go; DO NOT EDIT.\n\npackage handlers\n\n"))
	out.Write([]byte("import (\n	\"encoding/json\"\n\n"))
	out.Write([]byte("	\"github.com/sul-dlss-labs/taco/datautils\"\n)\n"))
	out.Write([]byte("var (\n"))
	out.Write([]byte("  // fileTemplate the defaults extracted from maps/DepositFile.json\n"))
	out.Write([]byte("  fileTemplate = `"))
	out.Write(byt)
	out.Write([]byte("`\n)\n\n"))
	out.Write([]byte("// NewFile creates a new instance of a File resource using the defaults in fileTemplate\n"))
	out.Write([]byte("func NewFile() *datautils.Resource {\n"))
	out.Write([]byte("  var resourceData datautils.JSONObject\n"))
	out.Write([]byte("  json.Unmarshal([]byte(fileTemplate), &resourceData)\n"))
	out.Write([]byte("  return datautils.NewResource(resourceData)\n"))
	out.Write([]byte("}\n"))
}

// findDefaults examines the schema for properties with default values
// returns an object like:
//   { @type: "foo", "@context": "bar", "administrative": { "access": "dark"}}
//
func findDefaults(schema *datautils.JSONObject) *datautils.JSONObject {
	props := schema.GetObj("properties")
	results := &datautils.JSONObject{}
	for key := range *props {
		property := props.GetObj(key)
		if property.HasKey("type") &&
			property.GetS("type") == "object" &&
			property.HasKey("properties") {
			// Add the child defaults to the template.
			childResults := findDefaults(property)
			(*results)[key] = childResults
		}
		if property.HasKey("default") {
			(*results)[key] = (*property)["default"]
		}
	}

	return results
}

const dirname = "maps"

// Reads all .txt files in the current folder
// and encodes them as strings literals in textfiles.go
func generateMaps() {
	fs, _ := ioutil.ReadDir(dirname)
	out, _ := os.Create("validators/maps.go")
	out.Write([]byte("// Code generated by generate/generate.go; DO NOT EDIT.\n\npackage validators\n\nvar (\n"))
	out.Write([]byte("  // Data embedded version of the maps/*.json used at generation time\n  Data = map[string]string{\n"))
	for _, f := range fs {
		if strings.HasSuffix(f.Name(), ".json") {

			out.Write([]byte("    \"" + f.Name() + "\": `"))
			log.Printf("adding %s ", f.Name())
			f, _ := ioutil.ReadFile(path.Join(dirname, f.Name()))
			str := strings.Replace(string(f), "`", "'", -1)
			out.Write([]byte(str))
			out.Write([]byte("`,\n"))
		}
	}
	out.Write([]byte("  }\n)\n"))
}
